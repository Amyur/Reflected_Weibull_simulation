par(mfrow=c(1, 2))
#mu
plot(x=res$n, y=res$mu, xlab="n",
type='b', las=1, ylab='bias', main=expression(mu))
abline(h=0, lty='dashed', col='red')
#sigma
plot(x=res$n, y=res$sigma, xlab="n",
type='b', las=1, ylab='bias', main=expression(sigma))
abline(h=0, lty='dashed', col='red')
par(mfrow=c(1, 2))
#mu
plot(x=res$n, y=res$mu, xlab="n", ylim=c(-0.06, 0),
type='b', las=1, ylab='bias', main=expression(mu))
abline(h=0, lty='dashed', col='red')
#sigma
plot(x=res$n, y=res$sigma, xlab="n", ylim=c(-0.06, 0),
type='b', las=1, ylab='bias', main=expression(sigma))
abline(h=0, lty='dashed', col='red')
pdf('bias_ConcensuraSincov_100000.pdf', width=9, height=5)
par(mfrow=c(1, 2))
#mu
plot(x=res$n, y=res$mu, xlab="n", ylim=c(-0.06, 0),
type='b', las=1, ylab='bias', main=expression(mu))
abline(h=0, lty='dashed', col='red')
#sigma
plot(x=res$n, y=res$sigma, xlab="n", ylim=c(-0.06, 0),
type='b', las=1, ylab='bias', main=expression(sigma))
abline(h=0, lty='dashed', col='red')
dev.off()
# MEAN
res <- dt %>% group_by(n) %>% summarise(mu=mean(mu),
sigma=mean(sigma))
par(mfrow=c(1, 2))
#mu
plot(x=res$n, y=res$mu, xlab="n",
type='b', las=1, ylab='mean', main=expression(mu))
abline(h=1, lty='dashed', col='red')
#sigma
plot(x=res$n, y=res$sigma, xlab="n",
type='b', las=1, ylab='mean', main=expression(sigma))
abline(h=1, lty='dashed', col='red')
par(mfrow=c(1, 2))
#mu
plot(x=res$n, y=res$mu, xlab="n", ylim=c(1, 1.05),
type='b', las=1, ylab='mean', main=expression(mu))
abline(h=1, lty='dashed', col='red')
#sigma
plot(x=res$n, y=res$sigma, xlab="n", ylim=c(1, 1.05),
type='b', las=1, ylab='mean', main=expression(sigma))
abline(h=1, lty='dashed', col='red')
par(mfrow=c(1, 2))
#mu
plot(x=res$n, y=res$mu, xlab="n", ylim=c(1, 1.06),
type='b', las=1, ylab='mean', main=expression(mu))
abline(h=1, lty='dashed', col='red')
#sigma
plot(x=res$n, y=res$sigma, xlab="n", ylim=c(1, 1.06),
type='b', las=1, ylab='mean', main=expression(sigma))
abline(h=1, lty='dashed', col='red')
pdf('mean_ConcensuraSincov_100000.pdf', width=9, height=5)
par(mfrow=c(1, 2))
#mu
plot(x=res$n, y=res$mu, xlab="n", ylim=c(1, 1.06),
type='b', las=1, ylab='mean', main=expression(mu))
abline(h=1, lty='dashed', col='red')
#sigma
plot(x=res$n, y=res$sigma, xlab="n", ylim=c(1, 1.06),
type='b', las=1, ylab='mean', main=expression(sigma))
abline(h=1, lty='dashed', col='red')
dev.off()
# VAR
res <- dt %>% group_by(n) %>% summarise(mu=var(mu),
sigma=var(sigma))
par(mfrow=c(1, 2))
#mu
plot(x=res$n, y=res$mu, xlab="n",
type='b', las=1, ylab='VAR', main=expression(mu))
abline(h=0, lty='dashed', col='red')
#sigma
plot(x=res$n, y=res$sigma, xlab="n",
type='b', las=1, ylab='VAR', main=expression(sigma))
abline(h=0, lty='dashed', col='red')
par(mfrow=c(1, 2))
#mu
plot(x=res$n, y=res$mu, xlab="n", ylim=c(0, 0.08),
type='b', las=1, ylab='VAR', main=expression(mu))
abline(h=0, lty='dashed', col='red')
#sigma
plot(x=res$n, y=res$sigma, xlab="n", ylim=c(0, 0.08),
type='b', las=1, ylab='VAR', main=expression(sigma))
abline(h=0, lty='dashed', col='red')
pdf('var_ConcensuraSincov_100000.pdf', width=9, height=5)
par(mfrow=c(1, 2))
#mu
plot(x=res$n, y=res$mu, xlab="n", ylim=c(0, 0.08),
type='b', las=1, ylab='VAR', main=expression(mu))
abline(h=0, lty='dashed', col='red')
#sigma
plot(x=res$n, y=res$sigma, xlab="n", ylim=c(0, 0.08),
type='b', las=1, ylab='VAR', main=expression(sigma))
abline(h=0, lty='dashed', col='red')
dev.off()
library(ggplot2)
library(maps)
library(ggthemes)
attach(time_series_19_covid_Confirmed)
days = time_series_19_covid_Confirmed[5:44]
library(readr)
time_series_19_covid_Confirmed <- read_csv("C:/Users/Amylkar/Downloads/time_series_19-covid-Confirmed.csv")
View(time_series_19_covid_Confirmed)
attach(time_series_19_covid_Confirmed)
days = time_series_19_covid_Confirmed[5:44]
city = time_series_19_covid_Confirmed[1:4]
matr = matrix(NA, 5000, 4)
View(city)
View(days)
matr = matrix(NA, 40, 4)
for (i in 1){
for (j in 1:40){
matr[j,1] = city[i,1]
matr[j,2] = city[i,2]
matr[j,3] = city[i,3]
matr[j,4] = city[i,4]
}
}
matr = vect()
for (i in 1){
for (j in 1:40){
matr[j,1] = city[i,1]
#matr[j,2] = city[i,2]
#matr[j,3] = city[i,3]
#matr[j,4] = city[i,4]
}
}
matr[j] = city[i,1]
matr = vect()
matr = vec()
matr = vector()
for (i in 1){
for (j in 1:40){
matr[j] = city[i,1]
#matr[j,2] = city[i,2]
#matr[j,3] = city[i,3]
#matr[j,4] = city[i,4]
}
}
matr
matr = matrix()
for (i in 1){
for (j in 1:40){
matr[j, 1] = city[i,1]
#matr[j,2] = city[i,2]
#matr[j,3] = city[i,3]
#matr[j,4] = city[i,4]
}
}
matr = vector()
for (i in 1){
for (j in 1:40){
matr[j, 1] = city[i,1]
#matr[j,2] = city[i,2]
#matr[j,3] = city[i,3]
#matr[j,4] = city[i,4]
}
}
for (i in 1){
for (j in 1:40){
matr[j] = city[i,1]
#matr[j,2] = city[i,2]
#matr[j,3] = city[i,3]
#matr[j,4] = city[i,4]
}
}
countr = vector()
latit = vector()
longit = vector()
for (i in 1){
for (j in 1:40){
countr[j] = city[i,2]
latit[j] = city[i,3]
longit[j] = city[i,4]
}
}
data = data.frame(countr, latit, longit)
View(data)
countr = vector()
latit = vector()
longit = vector()
for (i in 1){
for (j in 1:40){
countr[j] = city[i,2]
latit[j] = city[i,3]
longit[j] = city[i,4]
}
}
View(latit)
data = data.frame(countr, latit, longit)
data
data = data.frame(list(countr), list(latit), list(longit))
data
data = data.frame("pais"=countr, "latitud" = latit, "longitud"=longit)
data
datas = data.frame("pais"=countr, "latitud" = latit, "longitud"=longit)
View(datas)
a=c(0,3, 4)
a
class(a)
class(countr)
datas = data.frame("pais"=as.numeric(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit))
datas
data = data.frame("pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit))
View(data)
countr = vector()
latit = vector()
longit = vector()
for (i in 1:125){
for (j in 1:40){
countr[j] = city[i,2]
latit[j] = city[i,3]
longit[j] = city[i,4]
}
if(i=1){
data = data.frame("pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit))
}
else{
new = data.frame("pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit))
data = rbind(data, new)
}
}
countr = vector()
latit = vector()
longit = vector()
for (i in 1:125){
for (j in 1:40){
countr[j] = city[i,2]
latit[j] = city[i,3]
longit[j] = city[i,4]
}
if(i=1){
data = data.frame("pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit))
}
else{
new = data.frame("pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit)),
data = rbind(data, new)
}
}
countr = vector()
latit = vector()
longit = vector()
for (i in 1:125){
for (j in 1:40){
countr[j] = city[i,2]
latit[j] = city[i,3]
longit[j] = city[i,4]
}
if(i==1){
data = data.frame("pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit))
}
else{
data = rbind(data, data.frame("pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit)))
}
}
View(data)
View(days)
colnames(days)
class(colnames(days))
attach(time_series_19_covid_Confirmed)
days = time_series_19_covid_Confirmed[5:44]
library(readr)
time_series_19_covid_Confirmed <- read_csv("C:/Users/Amylkar/Downloads/time_series_19-covid-Confirmed.csv")
View(time_series_19_covid_Confirmed)
attach(time_series_19_covid_Confirmed)
days = time_series_19_covid_Confirmed[5:44]
city = time_series_19_covid_Confirmed[1:4]
#Processing de data
countr = vector()
latit = vector()
longit = vector()
for (i in 1:125){
for (j in 1:40){
countr[j] = city[i,2]
latit[j] = city[i,3]
longit[j] = city[i,4]
}
if(i==1){
data1 = data.frame("pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit))
}
else{
data1 = rbind(data1, data.frame("pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit)))
}
}
colnames(days)[1]
#preprocessing data2
dat = vector()
confirm = vector()
for (i in 1:125){
for (j in 1:40){
dat[j] = colnames(days)[j]
}
if(i==1){
data2 = data.frame("date"=as.character(dat))
}
else {
data2 = rbind(data2, data.frame("date"=as.character(dat)))
}
}
View(data2)
confirm = vector()
confirm = vector()
for (i in 1:125){
for (j in 1:40){
confirm[j] = days[i, j]
}
if(i==1){
data3 = data.frame("date"=as.numeric(confirm))
}
else {
data3 = rbind(data3, data.frame("date"=as.numeric(confirm)))
}
}
View(data3)
View(city)
View(countr)
attach(time_series_19_covid_Confirmed)
days = time_series_19_covid_Confirmed[5:44]
city = time_series_19_covid_Confirmed[1:4]
#Processing de data1
ciudad = vector()
countr = vector()
latit = vector()
longit = vector()
for (i in 1:125){
for (j in 1:40){
ciudad[j] = city[i, 1]
countr[j] = city[i, 2]
latit[j] = city[i, 3]
longit[j] = city[i, 4]
}
if(i==1){
data1 = data.frame("ciudad"=as.character(ciudad), "pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit))
}
else{
data1 = rbind(data1, data.frame("ciudad"=as.character(ciudad), "pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit)))
}
}
#preprocessing data2
dat = vector()
for (i in 1:125){
for (j in 1:40){
dat[j] = colnames(days)[j]
}
if(i==1){
data2 = data.frame("date"=as.character(dat))
}
else {
data2 = rbind(data2, data.frame("date"=as.character(dat)))
}
}
confirm = vector()
for (i in 1:125){
for (j in 1:40){
confirm[j] = days[i, j]
}
if(i==1){
data3 = data.frame("date"=as.numeric(confirm))
}
else {
data3 = rbind(data3, data.frame("date"=as.numeric(confirm)))
}
}
View(data1)
datos = cbind(data1, data2, data3)
View(datos)
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
days = time_series_19_covid_Confirmed[5:44]
city = time_series_19_covid_Confirmed[1:4]
#Processing de data1
ciudad = vector()
countr = vector()
latit = vector()
longit = vector()
for (i in 1:125){
for (j in 1:40){
ciudad[j] = city[i, 1]
countr[j] = city[i, 2]
latit[j] = city[i, 3]
longit[j] = city[i, 4]
}
if(i==1){
data1 = data.frame("ciudad"=as.character(ciudad), "pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit))
}
else{
data1 = rbind(data1, data.frame("ciudad"=as.character(ciudad), "pais"=as.character(countr), "latitud"=as.numeric(latit), "longitud"=as.numeric(longit)))
}
}
#preprocessing data2
dat = vector()
for (i in 1:125){
for (j in 1:40){
dat[j] = colnames(days)[j]
}
if(i==1){
data2 = data.frame("date"=as.character(dat))
}
else {
data2 = rbind(data2, data.frame("date"=as.character(dat)))
}
}
confirm = vector()
for (i in 1:125){
for (j in 1:40){
confirm[j] = days[i, j]
}
if(i==1){
data3 = data.frame("confirm"=as.numeric(confirm))
}
else {
data3 = rbind(data3, data.frame("confirm"=as.numeric(confirm)))
}
}
datos = cbind(data1, data2, data3)
View(datos)
ghost_points_ini <- tibble(
created_at = as.Date('1/22/20'),
followers = 0, lon = 0, lat = 0)
datos$newdate <- strptime(as.character(datos$date), "%m/%d/%Y")
datos$txtdate <- format(datos$newdate, "%Y-%m-%d")
datos$newdate <- strptime(as.character(datos$date), "%m/%d/%y")
datos$txtdate <- format(datos$newdate, "%Y-%m-%d")
ghost_points_ini <- tibble(
created_at = as.Date('2020-01-22'),
followers = 0, lon = 0, lat = 0)
ghost_points_fin <- tibble(
created_at = seq(as.Date('2020-02-29'),
as.Date('2020-03-01'),
by = 'days'),
followers = 0, lon = 0, lat = 0)
map <- world +
geom_point(aes(x = longitud, y = latitud, size = confirm,
frame = date,
cumulative = TRUE),
data = datos, colour = 'purple', alpha = .5) +
geom_point(aes(x = longitud, y = latitud, size = confirm, # this is the init transparent frame
frame = date,
cumulative = TRUE),
data = ghost_points_ini, alpha = 0) +
geom_point(aes(x = longitud, y = latitud, size = confirm, # this is the final transparent frames
frame = created_at,
cumulative = TRUE),
data = ghost_points_fin, alpha = 0) +
scale_size_continuous(range = c(1, 8), breaks = c(250, 500, 750, 1000)) +
labs(size = 'confirm')
library(gganimate)
ani.options(interval = 0.2)
gganimate(map)
install.packages("gifski")
require(gifski)
install.packages("av")
require(av)
ghost_points_ini <- tibble(
created_at = as.Date('2020-01-22'),
followers = 0, lon = 0, lat = 0)
ghost_points_fin <- tibble(
created_at = seq(as.Date('2020-02-29'),
as.Date('2020-03-01'),
by = 'days'),
followers = 0, lon = 0, lat = 0)
ghost_points_ini <- tibble(
created_at = as.Date('2020-01-22'),
confirm = 0, longitud = 0, latitud = 0)
ghost_points_ini <- tibble(
created_at = as.Date('2020-01-22'),
confirm = 0, longitud = 0, latitud = 0)
ghost_points_fin <- tibble(
created_at = seq(as.Date('2020-02-29'),
as.Date('2020-03-01'),
by = 'days'),
confirm  = 0, longitud = 0, latitud = 0)
map <- world +
geom_point(aes(x = longitud, y = latitud, size = confirm,
frame = date,
cumulative = TRUE),
data = datos, colour = 'purple', alpha = .5) +
geom_point(aes(x = longitud, y = latitud, size = confirm, # this is the init transparent frame
frame = date,
cumulative = TRUE),
data = ghost_points_ini, alpha = 0) +
geom_point(aes(x = longitud, y = latitud, size = confirm, # this is the final transparent frames
frame = created_at,
cumulative = TRUE),
data = ghost_points_fin, alpha = 0) +
scale_size_continuous(range = c(1, 8), breaks = c(250, 500, 750, 1000)) +
labs(size = 'confirm')
library(gganimate)
ani.options(interval = 0.2)
gganimate(map)
install_version("gganimate", version = "0.1.1", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("gganimate", version = "0.1.1", repos = "http://cran.us.r-project.org")
install_version("gganimate", version = "0.1.1", repos = "https://CRAN.R-project.org/package=gganimate)
library(gganimate)
ani.options(interval = 0.2)
gganimate(map)
install_version("gganimate", version = "0.1.1", repos = "https://CRAN.R-project.org/package=gganimate")
install_version("gganimate", version = "0.1.1", repos = "https://CRAN.R-project.org/package=gganimate")
install_version("gganimate", version = "0.1.1", repos = "https://cran.r-project.org/web/packages/gganimate/")
library(gganimate)
ani.options(interval = 0.2)
gganimate(map)
install_github("thomasp85/gganimate/releases/tag/v0.1.1")
