espe <- rbind(espe,b[1])
}
espe <- espe[-1]
espe <- as.numeric(espe)
espe
}
model <- gamlss(y2~poly(x,3), sigma.fo=~1, family='IW',
control=gamlss.control(n.cyc=5000, trace=FALSE))
summary(model)
esti <- esp2.1(model)
fun1 = function(x, mu, sigma) x * RelDists::dIW(x, mu = mu,
sigma = sigma)
fun2  = function(mu, sigma){
integrate (fun1, lower = 0, upper = Inf, mu=mu, sigma=sigma)
}
esp2.1 = function(mod) {
espe  <- 1
mu    <- as.vector(exp(fitted(mod, what='mu')))
r     <- length(mu)
sigma <- as.vector(rep(exp(coef(mod, what='sigma')), r))
for(i in 1:r){
b <-fun2(mu[i],sigma[i])
espe <- rbind(espe,b[1])
}
espe <- espe[-1]
espe <- as.numeric(espe)
espe
}
esp2.2 = function(mod) {
espe  <- 1
sigma <- as.vector(exp(fitted(mod, what='sigma')))
r     <- length(sigma)
mu    <- as.vector(rep(exp(coef(mod, what='mu')), r))
for(i in 1:r){
b <-fun2(mu[i],sigma[i])
espe <- rbind(espe,b[1])
}
espe <- espe[-1]
espe <- as.numeric(espe)
espe
}
esp2.3 = function(mod) {
espe  <- 1
mu    <- as.vector(exp(fitted(mod, what='mu')))
sigma <- as.vector(exp(fitted(mod, what='sigma')))
r     <- length(mu)
for(i in 1:r){
b <-fun2(mu[i],sigma[i])
espe <- rbind(espe,b[1])
}
espe <- espe[-1]
espe <- as.numeric(espe)
espe
}
esti <- esp2.1(model)
par(mfrow=c(1,3))
wp(model)
plot(x,esti)
plot(y2,esti)
cor(y2,esti)
mu
mod
espe
espe
esp2.1 = function(mod) {
espe  <- 1
mu    <- as.vector(exp(fitted(mod, what='mu')))
r     <- length(mu)
sigma <- as.vector(rep(exp(coef(mod, what='sigma')), r))
for(i in 1:r){
b <-fun2(mu[i],sigma[i])
espe <- rbind(espe,b[1])
}
espe <- espe[-1]
espe <- as.numeric(espe)
espe
}
espe
fun1 = function(x, mu, sigma) x * RelDists::dIW(x, mu = mu,
sigma = sigma)
fun2  = function(mu, sigma){
integrate (fun1, lower = 0, upper = Inf, mu=mu, sigma=sigma)
}
fun2(
model$mu.coefficients
fun2(model$mu.coefficients, 1)
esti <- esp2.2(model)
par(mfrow=c(1,3))
wp(model)
plot(x,esti)
plot(y2,esti)
esti
esti <- esp2.3(model)
model <- gamlss(y2~poly(x,4), sigma.fo=~1, family='IW',
control=gamlss.control(n.cyc=5000, trace=FALSE))
summary(model)
esti <- esp2.1(model)
esti <- esp2.1(model)
View(esp2.1)
View(esp2.1)
fun1 = function(x, mu, sigma) x * RelDists::dIW(x, mu = mu,
sigma = sigma)
fun2  = function(mu, sigma){
integrate (fun1, lower = 0, upper = Inf, mu=mu, sigma=sigma)
}
espe  <- 1
mu    <- as.vector(exp(fitted(mod, what='mu')))
r     <- length(mu)
mu    <- as.vector(rep(exp(coef(model, what='mu')), r))
esp2.2 = function(mod) {
espe  <- 1
sigma <- as.vector(exp(fitted(mod, what='sigma')))
r     <- length(sigma)
mu    <- as.vector(rep(exp(coef(mod, what='mu')), r))
for(i in 1:r){
b <-fun2(mu[i],sigma[i])
espe <- rbind(espe,b[1])
}
espe <- espe[-1]
espe <- as.numeric(espe)
espe
}
sigma <- as.vector(exp(fitted(mod, what='sigma')))
integrate (fun1, lower = 0, upper = Inf, mu=mu, sigma=sigma)
fun1 = function(x, mu, sigma) x * RelDists::dIW(x, mu = mu,
sigma = sigma)
fun2  = function(mu, sigma){
integrate (fun1, lower = 0, upper = Inf, mu=mu, sigma=sigma)
}
esti <- esp2.1(model)
mu    <- as.vector(exp(fitted(mod, what='mu')))
summary(model)
esp2.2 = function(mod) {
espe  <- 1
sigma <- as.vector(exp(fitted(mod, what='sigma')))
r     <- length(sigma)
mu    <- as.vector(rep(exp(coef(mod, what='mu')), r))
for(i in 1:r){
b <-fun2(mu[i],sigma[i])
espe <- rbind(espe,b[1])
}
espe <- espe[-1]
espe <- as.numeric(espe)
espe
}
esti <- esp2.2(model)
par(mfrow=c(1,3))
wp(model)
plot(x,esti)
plot(y2,esti)
model <- gamlss(y2~poly(x,3), sigma.fo=~1, family='IW',
control=gamlss.control(n.cyc=5000, trace=FALSE))
summary(model)
esti <- esp2.2(model)
par(mfrow=c(1,3))
wp(model)
plot(x,esti)
plot(y2,esti)
cor(y2,esti)
mu    <- as.vector(exp(fitted(mod, what='mu')))
cor(y2,esti)
predict(model)
predict
?predict.gamlss
fitted(model, what='sigma')
predict.gamlss(model, what='sigma')
require(gamlss)
predict.gamlss(model, what='sigma')
predict(model, what='sigma')
esp2.1 = function(mod) {
espe  <- 1
mu    <- as.vector(exp(fitted(mod, what='mu')))
r     <- length(mu)
sigma <- as.vector(rep(exp(coef(mod, what='sigma')), r))
for(i in 1:r){
b <-fun2(mu[i],sigma[i])
espe <- rbind(espe,b[1])
}
espe <- espe[-1]
espe <- as.numeric(espe)
espe
}
esti <- esp2.1(model)
model <- gamlss(y2~sc(x,3), sigma.fo=~1, family='IW',
control=gamlss.control(n.cyc=5000, trace=FALSE))
model <- gamlss(y2~cs(x,3), sigma.fo=~1, family='IW',
control=gamlss.control(n.cyc=5000, trace=FALSE))
esti <- esp2.1(model)
esti <- esp2.2(model)
par(mfrow=c(1,3))
wp(model)
plot(x,esti)
model <- gamlss(y2~cs(x,3), sigma.fo=~1, family='EW',
control=gamlss.control(n.cyc=5000, trace=FALSE))
summary(model)
esti <- esp2.2(model)
par(mfrow=c(1,3))
wp(model)
plot(x,esti)
plot(y2,esti)
cor(y2,esti)
model <- gamlss(y2~poly(x,3), sigma.fo=~1, family='EW',
control=gamlss.control(n.cyc=5000, trace=FALSE))
summary(model)
esti <- esp2.2(model)
par(mfrow=c(1,3))
wp(model)
plot(x,esti)
plot(y2,esti)
exp(fitted(model, what='mu'))
f<-integrate(dnorm, -1.96, 1.96)
f
f[1]
model
espe  <- 1
mu    <- as.vector(exp(fitted(model, what='mu')))
r     <- length(mu)
sigma <- as.vector(rep(exp(coef(model, what='sigma')), r))
i=1
b <-fun2(mu[i],sigma[i])
espe <- rbind(espe,b[1])
espe
i=2
b <-fun2(mu[i],sigma[i])
espe <- rbind(espe,b[1])
espe
i=3
b <-fun2(mu[i],sigma[i])
espe <- rbind(espe,b[1])
espe
esti <- esp2.1(model)
esti
par(mfrow=c(1,3))
wp(model)
plot(x,esti)
plot(y2,esti)
cor(y2,esti)
esp2.1 = function(mod) {
espe  <- 1
mu    <- as.vector(exp(fitted(mod, what='mu')))
r     <- length(mu)
sigma <- as.vector(rep(exp(coef(mod, what='sigma')), r))
for(i in 1:r){
b <-fun2(mu[i],sigma[i])
espe <- rbind(espe,b[1])
}
espe <- espe[-1]
espe <- as.numeric(espe)
espe
}
esti <- esp2.1(model)
esti
model <- gamlss(y2~poly(x,4), sigma.fo=~1, family='EW',
control=gamlss.control(n.cyc=5000, trace=FALSE))
esti <- esp2.1(model)
esti
par(mfrow=c(1,3))
wp(model)
plot(x,esti)
plot(y2,esti)
model <- gamlss(y2~poly(x,4), sigma.fo=~1, family='IW',
control=gamlss.control(n.cyc=5000, trace=FALSE))
esti <- esp2.1(model)
R.version()
R.Version()
R.version.string()
R.version.string
RStudio.version()
library("tools", lib.loc="C:/Program Files/R/R-3.5.1/library")
RStudio.version()
require(tools)
RStudio.version()
taller<-rpois(100, 1/300)
hist(taller)
taller
taller<-rpois(1000, 1/300)
taller
taller<-rexp(1000, 1/300)
taller
hist(taller)
taller<-rpois(100,300)
taller
hist(taller)
taller<-rpois(1000,300)
hist(taller)
dpois(2, 1/300)
dpois(1, 1/300)
install.packages("faraway")
install.packages("faraway")
e^(-0.000869)
exp(-0.000869)
library(tinytex)
rect(100, 400, 125, 450, col = "green", border = "blue") # coloured
plot(c(100, 200), c(300, 450), type= "n", xlab = "", ylab = "")
rect(100, 400, 125, 450, col = "green", border = "blue") # coloured
knitr::opts_chunk$set(echo=FALSE, eval=TRUE)
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B")
plot(c(100, 200), c(300, 450), type= "n", xlab = "", ylab = "")
rect(100, 400, 125, 450, col = "green", border = "blue") # coloured
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B")
rect(0, 0, 1.7, 300, col = "gray", border = "blue")
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B")
rect(0, 0, 1.7, 300, col = "gray", border = "blue")
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B")
rect(0, 0, 1.7, 300, col = "gray", border = "black")
rect(1.7, 202.1, 3, 300, col = "lightblue", border = "aquamrine", lty="dotted")
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B")
rect(0, 0, 1.7, 300, col = "gray", border = "black")
rect(1.7, 202.1, 3, 300, col = "lightblue", border = "aquamrine", lty="dotted")
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B")
rect(0, 0, 1.7, 300, col = "gray", border = "black")
rect(1.7, 202.1, 3, 300, col = "lightblue", border = "aquamrine", lty="dotted")
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B")
rect(0, 0, 1.7, 300, col = "gray", border = "black")
rect(1.71, 202.1, 3, 300, col = "lightblue", border = "aquamrine", lty="dotted")
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B")
rect(0, 0, 1.7, 300, col = "gray", border = "black")
rect(1.7, 202.1, 3, 300, col = "lightblue", border = "aquamarine", lty="dotted")
rect(1.7,0, 3, 202.1,  col = "ivory", border = "brown4", lty="dashed")
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B")
rect(0, 0, 1.7, 300, col = "gray", border = "black")
text(0.7, 150, "2.5")
rect(1.7, 202.1, 3, 300, col = "lightblue", border = "aquamarine", lty="dotted")
rect(1.7,0, 3, 202.1,  col = "ivory", border = "brown4", lty="dashed")
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B")
rect(0, 0, 1.7, 300, col = "gray", border = "black")
text(0.7, 150, "2.5")
rect(1.7, 202.1, 3, 300, col = "lightblue", border = "aquamarine", lty="dotted")
text(2.2, 250, "1.3")
rect(1.7,0, 3, 202.1,  col = "ivory", border = "brown4", lty="dashed")
text(2.5, 100, "5.6")
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B")
rect(0, 0, 1.7, 300, col = "gray", border = "black")
text(0.7, 150, "2.5")
rect(1.7, 202.1, 3, 300, col = "lightblue", border = "aquamarine", lty="dotted")
text(2.35, 250, "1.3")
rect(1.7,0, 3, 202.1,  col = "ivory", border = "brown4", lty="dashed")
text(2.35, 100, "5.6")
` Predictor A>=1.7 then`
Predictor A>=1.7 then
"Predictor A>=1.7 then
if Predictor B>= 202.1 then Outcome =1.3
else Outcome =5.6
else Outcome=2.5"
install.packages("parameters")
library(ggplot2)
View(f)
knitr::opts_chunk$set(echo=FALSE, eval=TRUE)
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B")
rect(0, 0, 1.7, 300, col = "gray", border = "black")
text(0.7, 150, "2.5")
rect(1.7, 202.1, 3, 300, col = "lightblue", border = "aquamarine", lty="dotted")
text(2.35, 250, "1.3")
rect(1.7,0, 3, 202.1,  col = "ivory", border = "brown4", lty="dashed")
text(2.35, 100, "5.6")
plot(c(0, 3), c(0, 300), type= "n", xlab = "Predictor A", ylab = "Predictor B", cex.axis=1.5)
rect(0, 0, 1.7, 300, col = "gray", border = "black")
text(0.7, 150, "2.5")
rect(1.7, 202.1, 3, 300, col = "lightblue", border = "aquamarine", lty="dotted")
text(2.35, 250, "1.3")
rect(1.7,0, 3, 202.1,  col = "ivory", border = "brown4", lty="dashed")
text(2.35, 100, "5.6")
library(readxl)
Falla <- read_excel("G:/Mi unidad/Especializacion/Monografías/2019/Falla Rueda.xlsx")
View(Falla)
install.packages("MASS")
library(MASS)
fitdistr(Falla$Dias,densfun=dweibull,start=list(scale=1,shape=2))##
Fallas<-Falla$Dias+0.1
View(Falla)
View(Falla)
fitdistr(Falla$Dias,densfun=dweibull,start=list(scale=1,shape=2))##
fitdistr(Fallas$Dias,densfun=dweibull,start=list(scale=1,shape=2))##
fitdistr(Fallas$Dias,densfun=dweibull,start=list(scale=2,shape=5))##
attach(Fallas)
attach(Falla)
Dias
fitdistr(Dias,densfun=dweibull,start=list(scale=2,shape=5))##
Dias<-Dias+0.1
Dias
fitdistr(Dias,densfun=dweibull,start=list(scale=2,shape=5))##
attach(Falla)
ks.test(Dias,"pweibull", shape=0.44682331,scale=2.91301674)
library(vcd)
install.packages("vcd")
install.packages("vcd")
gf<-goodfit(Dias,type= "poisson",method= "MinChisq")
Dias<-Dias-0.1
gf<-goodfit(Dias,type= "poisson",method= "MinChisq")
Dias
goodfit(Dias,type= "poisson",method= "MinChisq")
library(vcd)
library(grid)
goodfit(Dias,type= "poisson",method= "MinChisq")
gf<-goodfit(Dias,type= "poisson",method= "MinChisq")
summary(gf)
x<-seq(1, 60, 1)
x
pweibull(x, shape=0.44682331,scale=2.91301674, lower.tail = FALSE)
Rt<-pweibull(x, shape=0.44682331,scale=2.91301674, lower.tail = FALSE)
plot(x, Rt)
ft<-dweibull(x, shape=0.44682331,scale=2.91301674, lower.tail = FALSE)
ht<-ft/Rt
ft<-dweibull(x, shape=0.44682331,scale=2.91301674, lower.tail = FALSE)
ft<-dweibull(x, shape=0.44682331,scale=2.91301674)
ht<-ft/Rt
plot(x, ht)
plot(x, Rt)
cov(Dias)
install.packages(c("caret", "tidyverse"))
knitr::opts_chunk$set(echo = FALSE, cache=FALSE)
#### File name: NormalGammaLognormal_Todos.xlsx
library(readxl)
datos <- read_excel("NormalGammaLognormal_Todos.xlsx")
library(readxl)
NormalGammaLognormal_Todos <- read_excel("G:/Mi unidad/CLASSROOM/Cartas Individual, EWMA & CUSUM/Trabajo en Conjunto/Resultados/Parte Shif Grande/NormalGammaLognormal_Todos.xlsx")
View(NormalGammaLognormal_Todos)
datos<-NormalGammaLognormal_Todos
#### File name: NormalGammaLognormal_Todos.xlsx
library(readxl)
#datos <- read_excel("NormalGammaLognormal_Todos.xlsx")
datos.out <- datos[datos$k != 0,]
datos.in <- datos[datos$k == 0,]
# RE vs phi
par(mfrow=c(2,3))
with(data = datos.in, hist(ARL,xlab=expression('ARL'[0]), xlim = c(0,650), ylim = c(0,60),
ylab='Frequency', las=1, main=""))
abline(v=370.4, col="red")
with(data = datos.in, hist(ARDIF1,xlab=expression('ARD'[0]), xlim = c(-1,1), ylim = c(0,60),
ylab='Frequency', las=1, main=""))
abline(v = 0, col = 2)
with(data = datos.in, hist(ARL1.ARL0,xlab=expression('ARR'[0]), xlim = c(0,9), ylim = c(0,60),
ylab='Frequency', las=1, main=""))
abline(v = 1, col = 2)
with(data = datos.out, hist(ARL,xlab=expression('ARL'[1]), xlim = c(0,650),  ylim = c(0,800),
ylab='Frequency', las=1, main=""))
abline(v=370.4, col="red")
with(data = datos.out, hist(ARDIF1,xlab=expression('ARD'[1]), xlim = c(-1,1), ylim = c(0,800),
ylab='Frequency', las=1, main=""))
abline(v = 0, col = 2)
with(data = datos.out, hist(ARL1.ARL0,xlab=expression('ARR'[1]), xlim = c(0,9), ylim = c(0,800),
ylab='Frequency', las=1, main=""))
abline(v = 1, col = 2)
length(which(datos.in$ARDIF1<=0))/length(datos.in$ARDIF1)
length(which(datos.in$ARDIF1<=0 &
datos.in$distribucion !="Normal"))/length(datos.in$ARL1.ARL0)
length(which(datos.out$ARL<=370.4))/length(datos.out$ARL)
length(which(datos.out$ARL<=370.4 &
datos.out$distribucion !="Normal"))/length(datos.out$ARL)
summary(datos)
apply(datos.in, sd)
apply(datos.in, ARD, sd)
View(datos.in)
View(datos.in)
names(datos.in)
tapply(datos.in, ARD, sd)
tapply(datos.in, datos.in$ARD, sd)
tapply(datos.in$ARD, sd)
> pandoc -f markdown_github -t latex
![image](abc.jpg)
^D
\includegraphics{abc.jpg}
pandoc -f markdown_github -t latex
![image](abc.jpg)
^D
\includegraphics{abc.jpg}
getwd()
data <- read.table('G:/Mi unidad/Proyectos/Investigacion/RelDists/Reldist Inscrito/Productos Divulgacion/Artículos para revista/Johan/100000/TotalSincensuraConcov.txt', header = TRUE)
data <- read.table('G:/Mi unidad/Proyectos/Investigacion/RelDists/Reldist Inscrito/Productos Divulgacion/Artículos para revista/Johan/100000/TotalSincensuraConcov.txt', header = TRUE)
require(RelDists)
require(gamlss)
require(gamlss.cens)
setwd("G:/Mi unidad/Proyectos/Investigacion/RelDists/Reldist Inscrito/Productos Divulgacion/Artículos para revista/Amylkar/Simulación 100000/Censura_50%/ConcensuraConcov")
# The parameters ----------------------------------------------------------
true_mu    <- 1
true_sigma <- 1
# Se genera la familia de funciones de RW censurada por la izquierda llamada RWrc
gen.cens(family="RW", type="left")
# Useful functions to the simulation study --------------------------------
# Funcion para obtener mu_hat, sigma_hat y nu_hat para un valor fijo de n
simul_one <- function(size) {
x1 <- runif(size, min=0.4, max=0.6)
x2 <- runif(size, min=0.4, max=0.6)
mu <- exp(1.5 - 1.5 * x1)
sigma <- exp(2 - 2 * x2)
y <- rRW(n=size, mu, sigma)
#Se aplica censura reemplazando los valores mayores
corte <- quantile(y, probs=0.50)
y <- ifelse(y <= corte, corte, y)
status <- ifelse(y == corte, 1, 2)
x <- Surv(y, status, type="left")
mod <- gamlss(x~x1, sigma.fo=~x2, family=RWlc,
control=gamlss.control(n.cyc=1000000, trace=FALSE), method=CG())
res <- c(coef(mod, what='mu'),
coef(mod, what='sigma'))
res
}
# Super function to simulate and write the estimated parameters
simul <- function(n) {
result <- t(replicate(n=nrep, expr=simul_one(size=n)))
result <- cbind(result, n)
write(x=t(result), file='ConcensuraConcovCG_50%_100000_940_1000.txt',
ncol=5, append=TRUE)
}
# Code to generate the simulations given n --------------------------------
# Aqui se definen los valores de tamano muestral n
# Luego se define el numero de repeticiones
n <- seq(from=940, to=1000, by=20)
nrep <- 100000
values <- expand.grid(n=n)
values
apply(values, 1, simul)
